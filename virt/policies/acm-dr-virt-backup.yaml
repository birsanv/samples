apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: acm-dr-virt-backup
  annotations:
    policy.open-cluster-management.io/categories: CA Security Assessment and Authorization
    policy.open-cluster-management.io/controls: CA-2 Security Assessments, CA-7 Continuous Monitoring
    policy.open-cluster-management.io/standards: NIST SP 800-53
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: acm-dr-virt-install
  disabled: false
  policy-templates:                                                                                                                                             
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: create-virt-backup
        spec:
          object-templates-raw: |
            {{- /* ns is the namespace for the OADP deployment  */ -}}
            {{- $ns := "open-cluster-management-backup" }}
            {{- $acm_virt_sch_name := "acm-rho-virt-schedule" }}

            {{- /* check if VM CRD is not installed  */ -}}
            {{- $vm_crd_name := "virtualmachines.kubevirt.io" }}
            {{- $vm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $vm_crd_name }}
            {{- $vm_crd_exists := eq $vm_crd.metadata.name  $vm_crd_name }}

            {{- $cron_schedule_configmap_name := "acm-virt-cron-schedules" }}

            {{- /* true if there are any VM instances  */ -}}
            {{- $vms_inst_exists := false  }}
            {{- $vms := "" }}

            {{- /* if vm CRD is installed check if there are VM instances  */ -}}
            {{ if $vm_crd_exists }}
              {{- $vms = (lookup "kubevirt.io/v1" "VirtualMachine" "" "" "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}").items }}
              {{- $vms_inst_exists = gt (len ($vms)) 0  }}
            {{- end }}

            {{- $generateSchedule := $vms_inst_exists }}

            {{- /* if there are any vm instances  */ -}}
            {{ if not $vms_inst_exists }}
                - complianceType: mustnothave
                  objectDefinition:
                    apiVersion: velero.io/v1
                    kind: Schedule
                    metadata:
                      name: {{ $acm_virt_sch_name }}
                      namespace: {{ $ns }}
            {{ else }}

              {{- $cron_schedule := "10 */1 * * *" }}
              {{- $ttl_schedule := "24h0m0s" }}
              {{- $acm_schedule_owner := "" }}
              {{- $paused_schedule := false }}

              {{- /* check if this is a hub, acm installed  */ -}}
              {{- $acm_crd_name := "multiclusterhubs.operator.open-cluster-management.io" }}
              {{- $acm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $acm_crd_name  }}
              {{- $is_hub := eq $acm_crd.metadata.name  $acm_crd_name }}

              {{- /* check if OADP CRD is installed  */ -}}
              {{- $dpa_crd_name := "dataprotectionapplications.oadp.openshift.io" }}
              {{- $dpa_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" "dataprotectionapplications.oadp.openshift.io"  }}
              {{- $dpa_crd_exists := eq $dpa_crd.metadata.name  $dpa_crd_name }}

              {{- /* check if velero is installed  */ -}}
              {{- $sch_crd_name := "schedules.velero.io" }}
              {{- $sch_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $sch_crd_name  }}
              {{- $sch_crd_exists := eq $sch_crd.metadata.name  $sch_crd_name }}

              {{ if ($sch_crd_exists) }}
                {{- /* Velero Schedule CRD is installed */ -}}

                {{hub $configMap := (lookup "v1" "ConfigMap" "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config"))) hub}}
                {{- $ttl_schedule = "{{hub $configMap.data.scheduleTTL hub}}" }}
                {{- $paused_schedule = "{{hub $configMap.data.schedulePaused hub}}" }}
                {{- $should_run_schedule := false }}
                {{ if not $is_hub }}
                  {{- /* always generate the schedule for managed clusters */ -}}
                  {{- $ns = "{{hub $configMap.data.backupNS hub}}" }}
                  {{- $should_run_schedule = true }}

                {{ else}}
                  {{- /* ACM is installed, this is a hub cluster */ -}}

                  {{- /* This is a hub cluster so generate the VM schedule only if there is a Velero acm schedule running */ -}}

                  {{- /* Schedule CRD is installed, check if there is an ACM schedule running */ -}}
                  {{- $acm_schedule_name := "acm-resources-schedule"}}
                  {{- $acm_sch_res := lookup "velero.io/v1" "Schedule" $ns $acm_schedule_name  }}
                  {{- $acm_sch_res_exists := eq $acm_sch_res.metadata.name  $acm_schedule_name }}
                  {{- /* ACM hub backup not running so don't generate the vm backup; delete it one exists */ -}}
                  {{- $should_run_schedule = or $should_run_schedule $acm_sch_res_exists }}
                {{- end}}

                {{ if not $should_run_schedule }}
                    {{- $generateSchedule = false }}
                - complianceType: mustnothave
                  objectDefinition:
                    apiVersion: velero.io/v1
                    kind: Schedule
                    metadata:
                      name: {{ $acm_virt_sch_name }}
                      namespace: {{ $ns }}
                {{ else }}
                   {{ if $is_hub }}
                    {{- /* get acm schedule settings */ -}}
                    {{- $acm_sch_res := lookup "velero.io/v1" "Schedule" $ns "acm-resources-schedule"  }}
                    {{- $acm_schedule_owner = (index $acm_sch_res.metadata.labels "cluster.open-cluster-management.io/backup-schedule-name") }}
                  {{- /* ACM MCH installed, this is the hub */ -}}
                  {{- end }}

                {{- end }}

              {{- /* Velero Schedule CRD is installed */ -}}
              {{- end }}

              {{ if $generateSchedule }}

                {{- $schedule_label := "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}" }}
                {{- /* get all vms with a backup label  */ -}}
                {{- $vms_to_backup := (lookup "kubevirt.io/v1" "VirtualMachine" "" "" $schedule_label) }}

                {{- /* get all cron jobs; for each of them define a backup schedule, if any vms are found for this schedule  */ -}}
                {{- $jobs_map := ( lookup "v1" "ConfigMap" $ns $cron_schedule_configmap_name ) }}

                {{- range $jobs := $jobs_map.data }}

                  {{- /* vms_ns gives the list of all namespaces where VM exist  */ -}}
                  {{ $vms_ns := " " }}
                  {{- /* vms_ns gives the list of all VM names  */ -}}
                  {{ $vms_names := " " }}
                  {{- /* vms_uids gives the list of all VM UIDs and the namespace--name for the vm  */ -}}
                  {{- /* this will be used to find the UID of the vm; the information is added to the backupSchedule label is this format : uid: ns--name  */ -}}
                  {{ $vms_uids := " " }}
                  {{- $acm_virt_sch_name_cron := "" }}

                  {{- /* go through all vms with a backup label and process only the ones with the same cron job as the one in current iteration */ -}}
                  {{- range $vms := $vms_to_backup.items }}

                    {{- /* get the name of the cron job from the vm label  */ -}}
                    {{- $cron_name := (index $vms.metadata.labels $schedule_label) }}

                    {{- $cron_schedule = fromConfigMap $ns $cron_schedule_configmap_name $cron_name }}

                    {{ if eq $cron_schedule $jobs }}

                      {{- /* get the value of the cron from the cron schedule config map  */ -}}
                      {{- /* create a schedule name using the cron name  */ -}}
                      {{- $acm_virt_sch_name_cron = ((cat $acm_virt_sch_name $cron_name) | replace "_" "-") | replace " " "-" }}

                      {{ if not (contains $vms.metadata.namespace $vms_ns) }}
                        {{- /* add VM namespace if not already in the vms_ns  */ -}}
                        {{- $vms_ns = (cat $vms_ns $vms.metadata.namespace " ") }}
                      {{- end }}
                      {{ if not (contains $vms.metadata.name $vms_names) }}
                        {{- /* add VM name if not already in the vms_names  */ -}}
                        {{- $vms_names = (cat $vms_names $vms.metadata.name " ") }}
                      {{- end }}
                      {{ if not (contains $vms.metadata.uid $vms_uids) }}
                        {{- /* add VM uid if not already in the vms_uids  */ -}}
                        {{- $vms_uids = (cat ((cat $vms_uids $vms.metadata.uid "#" $vms.metadata.namespace "--" $vms.metadata.name) | replace " " "") " ") }}
                      {{- end }}
                    {{- end }}
                  {{- end }}

                {{ if and (not (eq $vms_ns " ")) (not (eq $vms_names " ")) }}

                  - complianceType: mustonlyhave
                    objectDefinition:
                      apiVersion: velero.io/v1
                      kind: Schedule
                      metadata:
                        name: {{ $acm_virt_sch_name_cron }}
                        namespace: {{ $ns }}
                        labels:
                          {{ if not (eq $acm_schedule_owner "") }}
                          cluster.open-cluster-management.io/backup-schedule-name: {{ $acm_schedule_owner }}
                          {{- end }}
                          cluster.open-cluster-management.io/backup-cluster: {{ fromClusterClaim "id.openshift.io" }}
                          cluster.open-cluster-management.io/backup-schedule-type: kubevirt
                          {{- range $vms_uid := split " " $vms_uids }}
                            {{ if not (eq $vms_uid "") }}
                              {{- $vms_data := splitn "#" 2 $vms_uid }}
                              {{- $vm_uid := $vms_data._0 }}
                              {{- $vm_identity := $vms_data._1 }}
                          {{ $vm_uid }}: "{{ $vm_identity}}"
                            {{- end }}
                          {{- end }}
                      spec:
                        paused: {{ $paused_schedule }}
                        schedule: {{ $jobs }}
                        skipImmediately: false
                        template:
                          ttl: {{ $ttl_schedule }}
                          includeClusterResources: true
                          snapshotMoveData: true
                          defaultVolumesToFsBackup: false
                          includedNamespaces:
                            {{- range $vms_namespace := split " " $vms_ns }}
                            {{ if not (eq $vms_namespace "") }}
                            - {{ $vms_namespace }}
                            {{- end }}
                            {{- end }}
                          orLabelSelectors:
                            - matchExpressions:
                                - values:
                                  {{- range $vms_name := split " " $vms_names }}
                                    {{ if not (eq $vms_name "") }}
                                  - {{ $vms_name }}
                                    {{- end }}
                                  {{- end }}
                                  key: app
                                  operator: In
                            - matchExpressions:
                                - values:
                                  {{- range $vms_name := split " " $vms_names }}
                                    {{ if not (eq $vms_name "") }}
                                  - {{ $vms_name }}
                                    {{- end }}
                                  {{- end }}
                                  key: kubevirt.io/domain
                                  operator: In

                  {{- /* there are VM resources */ -}}
                  {{- end }}
                {{- /* end query cron schedules */ -}}
                {{- end }}

              {{- /* generateSchedule is true */ -}}
              {{- end}}

            {{- /* VM CRD is installed */ -}}
            {{- end}}
          remediationAction: enforce
          pruneObjectBehavior: DeleteIfCreated
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: check-backup-status-completed
        spec:
          object-templates-raw: |
            {{- /* check if this is a hub, acm installed  */ -}}
            {{- $acm_crd_name := "multiclusterhubs.operator.open-cluster-management.io" }}

            {{- $acm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $acm_crd_name  }}
            {{- $is_hub := eq $acm_crd.metadata.name  $acm_crd_name }}
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (kubevirt)"}}

            {{- $sch_crd_name := "schedules.velero.io" }}
            {{- $sch_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $sch_crd_name  }}
            {{- $sch_crd_exists := eq $sch_crd.metadata.name  $sch_crd_name }}

            {{ if $sch_crd_exists }}

              {{- /* if schedule exists, get the last generated backup and verify the status is Completed  */ -}}
              {{- range $scheduleObj := (lookup "velero.io/v1" "Schedule" "" ""  $schedule_label).items }}

                {{- $scheduleObjLastBckTime := "" }}
                {{ if and $scheduleObj.status (hasKey $scheduleObj.status "lastBackup") }}
                  {{- $scheduleObjLastBckTime = (index $scheduleObj.status "lastBackup") }}
                {{- end }}

                {{ if (eq $scheduleObjLastBckTime "") }}

              - complianceType: musthave
                objectDefinition:
                  apiVersion: velero.io/v1
                  kind: Schedule
                  metadata:
                    namespace: {{ $scheduleObj.metadata.namespace }}
                    name: {{ $scheduleObj.metadata.name }}
                    labels:
                      cluster.open-cluster-management.io/backup-schedule-type: kubevirt 
                  status:
                    phase: Enabled
                    lastBackup: "some value"

                {{ else }}
                  {{- range $backupList := (lookup "velero.io/v1" "Backup" "" "" $schedule_label).items }}
                    {{- $backupCreation := $backupList.metadata.creationTimestamp  }}
                    {{ if eq $backupCreation $scheduleObjLastBckTime }}

                      {{- $data_upload_label := "velero.io/backup-name, velero.io/backup-name in (aa)" }}
                      {{- $data_upload_label = replace "aa" $backupList.metadata.name $data_upload_label }}

                      {{- range $dataupload_obj :=  (lookup "velero.io/v2alpha1" "DataUpload" "$backupList.metadata.namespace" "" $data_upload_label ).items }}
              - complianceType: musthave
                objectDefinition:
                  apiVersion: velero.io/v2alpha1
                  kind: DataUpload
                  metadata:
                    namespace: {{ $backupList.metadata.namespace }}
                    name: {{ $dataupload_obj.metadata.name }}
                    labels:
                      velero.io/backup-name: {{ $backupList.metadata.name }}
                  status:
                    phase: Completed
                       {{- end }}

              - complianceType: musthave
                objectDefinition:
                  apiVersion: velero.io/v1
                  kind: Backup
                  metadata:
                    namespace: {{ $backupList.metadata.namespace }}
                    name: {{ $backupList.metadata.name }}
                    labels:
                      cluster.open-cluster-management.io/backup-cluster: {{ fromClusterClaim "id.openshift.io" }}
                      cluster.open-cluster-management.io/backup-schedule-type: kubevirt
                      velero.io/schedule-name: {{ $scheduleObj.metadata.name }}
                  status:
                    phase: Completed
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}

          remediationAction: inform
          severity: low  
